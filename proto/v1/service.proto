syntax = "proto3";
option go_package = "github.com/Rakesh678219/dataTransferFromClient/proto/v1";

package storage.v1;

// import "google/api/annotations.proto";


import "google/protobuf/timestamp.proto";
message UploadRequest {
	// Client has to send object attributes in first stream,
	// subsequent streams will be sent with object chunks.
	oneof upload_request {
		// Attributes of object
		FileAttributes metadata = 1;

		// Chunk of object content
		// Default max chunk size in gRPC is 4MB, so chunk size must be less than 4 MB.
		bytes chunk = 2;
	}
}

message UploadResponse {
	// Identifier of object generated by service.
	string file_id = 1;

	// Create time of object.
	google.protobuf.Timestamp time_created = 2;

	// Retention expiration time of object.
	google.protobuf.Timestamp retention_expiration_time = 3;

	// Size of the object.
	// size 0 or any negative number is treated as unknown size of the object.
	int64 size = 4;

	// MD5 hash of the data; encoded using base64.
	string md5Hash = 5;

	// Status of upload.
	UploadStatus status = 6;

	// Name of the bucket containing the object
	string bucket = 7;
}

message DeleteRequest {
	// If the object doesn't exist in the bucket, no error is thrown, keeping it consistent with s3 specs.
	string file_id = 1;

	// Name of the bucket, if not provided, object will be looked into default bucket.
	string bucket_name = 2;
}



message DeleteResponse {
	// Status of delete operation.
	DeleteStatus status = 1;
}

message DeleteDirectoryRequest {
	string directoryName = 1 [json_name = "directory-name"];
	string bucketName = 2 [json_name = "bucket-name"];
}


message ListRequest {
    // TBD - Taken from google API, need to evaluate how it will be useful.
    string delimiter = 1 ;

    // Maximum number of items to return in a single page of responses.
    int32 page_size = 2 ;

    // Filter results to objects whose names begin with this prefix.
    string prefix = 3 ;
	
    // If this field is not empty then it must contain the `nextPageToken` value
    // returned by a previous call to this method.  Using this field causes the
    // method to return additional results from the previous method call.
    string page_token = 4 ;

    // Name of the bucket, if not provided, objects will be searched in the default bucket.
    string bucket_name = 5;

    //bool versions = 4;
    // versions would be supported in next release.
}

message ListResponse {
    //List of objects with required prefix.
    repeated Object items = 1;

    // If there are more results than have been returned, then this field is set
    // to a non-empty value.  To see the additional results,
    // use that value as `page_token` in the next call to this method.
    string next_page_token = 2;
}

message DownloadRequest {
    // Unique file identifier id.
    string file_id = 1 ;
	
    // Name of the bucket, if not provided, object will be looked into default bucket.
    string bucket_name = 2;
}

message DownloadResponse {
	// Server will send file attributes in the first stream,
	// subsequent streams will be sent with file chunks.
	oneof download_response {
		// Attributes of the file.
		FileAttributes metadata = 1;

		// Chunk of file content
		// Default max chunk size in gRPC is 4MB, so chunk size must be less than 4 MB.
		bytes chunk = 2;
	}
}

message SignedURLRequest {
    // File identifier received from upload service. 
    string file_id = 1;

    // Signed URL options.
    SignedURLOptions options = 2;
	
    // Name of the bucket, if not provided, object will be looked in default bucket.
    string bucket_name = 3;
}

message SignedURLResponse {
    // Returns download file_url valid for specified time.
    string file_url = 1;
}

message ArchiveRequest {
	// Name of the bucket, if not provided, object will be archived from the default bucket.
	string source_bucket_name = 1;

	// Name of the bucket where the object will be archived. If not provided, default bucket would be used
	string destination_bucket_name = 2;

	// if set to true, files would be purged from the source bucket
	bool purge = 3;

	// The number of days old files to be archived. If not set or 0 all files in the source bucket will be archived
	int32 days_old = 4;

}

message ArchiveResponse {
	//The file ids of the file that are purged
	repeated string file_ids = 1;
}

service StorageService {

	// Upload is used to upload an object into object storage.
	rpc Upload(stream UploadRequest) returns (UploadResponse) {}

	// Download is used to download an object from object storage.
	rpc Download(DownloadRequest) returns (stream DownloadResponse) {}

	// Delete is used to delete an object from object storage.
	// If the specified object doesn't exist in the bucket, the method returns without throwing any error
	rpc Delete(DeleteRequest) returns (DeleteResponse) {
		// option (google.api.http) = {
		// 	delete : "/storage/v1/object/{file_id}"
		// };
	}

	rpc DeleteV2(DeleteRequest) returns (DeleteResponse) {
		// option (google.api.http) = {
		// 	post : "/storage/v2/object/{file_id}"
		// 	body : "*"
		// };
	}

	rpc DeleteDirectory(DeleteDirectoryRequest) returns (DeleteResponse) {
		// option (google.api.http) = {
		// 	post : "/storage/v1/delete"
		// 	body : "*"
		// };
	}

	// // SignedURL is used to get signed download url from storage service.
	rpc SignedURL(SignedURLRequest) returns (SignedURLResponse) {
		// option (google.api.http) = {
		// 	post : "/storage/v1/signedurl"
		// 	body : "*"
		//   };
	}

	// // List returns all the objects having required prefix. 
	rpc List(ListRequest) returns (ListResponse) {
		// option (google.api.http) = {
		// 	post: "/storage/v1/list"
		// 	body: "*"
		//   };
	}

	// // CreateBucket is used to create a new bucket in object storage
	// rpc CreateBucket(CreateBucketRequest) returns (CreateBucketResponse) {
	// 	option (google.api.http) = {
	// 		post : "/storage/v1/buckets/create"
	// 		body : "*"
	// 	  };
	// }

	// Archive is used to archive objects in a specific bucket.
	// Archive is supported in s3, gcs or minio server
	// rpc Archive(ArchiveRequest) returns (ArchiveResponse) {
	// 	option (google.api.http) = {
	// 		post : "/storage/v1/archive"
	// 		body : "*"
	// 	  };
	// }
}
message CreateBucketRequest {
    // name must 
    //  - contain only lowercase letters, numbers, dashes(-) and dots(.).
    //  - NOT contain uppercase characters or underscores.
    //  - start with a lowercase letter or number.
    //  - contain 3-63 characters.
	string name = 1;
}

message CreateBucketResponse {
	string message = 1;
}

message DeleteStatus {
    // delete status description.
    string message = 1;
    StatusCode code = 2;
}
enum StatusCode {
    // The implicit default enum value.
    UNKNOWN = 0;
    // action/operation is successful.
    SUCCESS = 1;
    // action/operation is failed.
    FAILED = 2;
}

message FileAttributes {
    // name of the file.
    string name = 1;

    // CRC32c checksum.
    string crc32c = 2;

    // MD5 hash of the data; encoded using base64.
    string md5Hash = 3;

    // User-provided metadata, in key/value pairs.
    repeated Metadata metadata = 4;

    // size in bytes of object to upload.
    int64 size = 5;

    // Name of the bucket, if not provided, object will be stored in default bucket.
    string bucket_name = 6;
}

// generic key-value metadata definition.
message Metadata {
    string key = 1;
    string value = 2;
}

message UploadStatus {
    // Upload status description.
    string message = 1;
    StatusCode code = 2;
}
message SignedURLOptions {
    // Method is the HTTP method to be used with the signed URL.
    // Signed URLs can support GET, HEAD, PUT, and DELETE requests.
    // GET will be supported for now. Required Field.
    string method = 1;

    // Expire_time is the expiration time(seconds) for the signed URL. Required Field.
    int64 expire_time = 2;

    // ContentType header to be provided by the client.
    string content_type = 3;

    // Headers is list of extension headers the client can provide.
    repeated string headers = 4;

    // MD5 is the base64 encoded MD5 checksum of the file.
    // If provided, the client needs to provide exact value in the request header.
    string md5 = 5;
}
message Object{
    // Name of the object.
    string name = 1;

    // Date and time the object was last modified.
    google.protobuf.Timestamp last_modified = 2;

    // Size in bytes of the object.
    int64 size = 3;

    // A standard MIME type describing the format of the object data.
    string content_type = 4;

    // The date and time at which the object is no longer able to be cached.
    google.protobuf.Timestamp expires = 5;
}

