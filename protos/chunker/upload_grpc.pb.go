// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: upload.proto

package chunker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileServiceClient is the client API for FileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServiceClient interface {
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (FileService_UploadFileClient, error)
	ReadFile(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (FileService_ReadFileClient, error)
	//Reports
	SaveReport(ctx context.Context, opts ...grpc.CallOption) (FileService_SaveReportClient, error)
	ReadReport(ctx context.Context, in *ReadReportRequest, opts ...grpc.CallOption) (FileService_ReadReportClient, error)
	ListReport(ctx context.Context, in *ListReportRequest, opts ...grpc.CallOption) (FileService_ListReportClient, error)
}

type fileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServiceClient(cc grpc.ClientConnInterface) FileServiceClient {
	return &fileServiceClient{cc}
}

func (c *fileServiceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (FileService_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileService_ServiceDesc.Streams[0], "/chunker.FileService/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServiceUploadFileClient{stream}
	return x, nil
}

type FileService_UploadFileClient interface {
	Send(*FileChunk) error
	CloseAndRecv() (*UploadResponse, error)
	grpc.ClientStream
}

type fileServiceUploadFileClient struct {
	grpc.ClientStream
}

func (x *fileServiceUploadFileClient) Send(m *FileChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileServiceUploadFileClient) CloseAndRecv() (*UploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServiceClient) ReadFile(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (FileService_ReadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileService_ServiceDesc.Streams[1], "/chunker.FileService/ReadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServiceReadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileService_ReadFileClient interface {
	Recv() (*ReadResponse, error)
	grpc.ClientStream
}

type fileServiceReadFileClient struct {
	grpc.ClientStream
}

func (x *fileServiceReadFileClient) Recv() (*ReadResponse, error) {
	m := new(ReadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServiceClient) SaveReport(ctx context.Context, opts ...grpc.CallOption) (FileService_SaveReportClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileService_ServiceDesc.Streams[2], "/chunker.FileService/saveReport", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServiceSaveReportClient{stream}
	return x, nil
}

type FileService_SaveReportClient interface {
	Send(*UploadReport) error
	CloseAndRecv() (*UploadReportResponse, error)
	grpc.ClientStream
}

type fileServiceSaveReportClient struct {
	grpc.ClientStream
}

func (x *fileServiceSaveReportClient) Send(m *UploadReport) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileServiceSaveReportClient) CloseAndRecv() (*UploadReportResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadReportResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServiceClient) ReadReport(ctx context.Context, in *ReadReportRequest, opts ...grpc.CallOption) (FileService_ReadReportClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileService_ServiceDesc.Streams[3], "/chunker.FileService/ReadReport", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServiceReadReportClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileService_ReadReportClient interface {
	Recv() (*ReadReportResponse, error)
	grpc.ClientStream
}

type fileServiceReadReportClient struct {
	grpc.ClientStream
}

func (x *fileServiceReadReportClient) Recv() (*ReadReportResponse, error) {
	m := new(ReadReportResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServiceClient) ListReport(ctx context.Context, in *ListReportRequest, opts ...grpc.CallOption) (FileService_ListReportClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileService_ServiceDesc.Streams[4], "/chunker.FileService/ListReport", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServiceListReportClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileService_ListReportClient interface {
	Recv() (*ListReportResponse, error)
	grpc.ClientStream
}

type fileServiceListReportClient struct {
	grpc.ClientStream
}

func (x *fileServiceListReportClient) Recv() (*ListReportResponse, error) {
	m := new(ListReportResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileServiceServer is the server API for FileService service.
// All implementations must embed UnimplementedFileServiceServer
// for forward compatibility
type FileServiceServer interface {
	UploadFile(FileService_UploadFileServer) error
	ReadFile(*ReadRequest, FileService_ReadFileServer) error
	//Reports
	SaveReport(FileService_SaveReportServer) error
	ReadReport(*ReadReportRequest, FileService_ReadReportServer) error
	ListReport(*ListReportRequest, FileService_ListReportServer) error
	mustEmbedUnimplementedFileServiceServer()
}

// UnimplementedFileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileServiceServer struct {
}

func (UnimplementedFileServiceServer) UploadFile(FileService_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedFileServiceServer) ReadFile(*ReadRequest, FileService_ReadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadFile not implemented")
}
func (UnimplementedFileServiceServer) SaveReport(FileService_SaveReportServer) error {
	return status.Errorf(codes.Unimplemented, "method SaveReport not implemented")
}
func (UnimplementedFileServiceServer) ReadReport(*ReadReportRequest, FileService_ReadReportServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadReport not implemented")
}
func (UnimplementedFileServiceServer) ListReport(*ListReportRequest, FileService_ListReportServer) error {
	return status.Errorf(codes.Unimplemented, "method ListReport not implemented")
}
func (UnimplementedFileServiceServer) mustEmbedUnimplementedFileServiceServer() {}

// UnsafeFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServiceServer will
// result in compilation errors.
type UnsafeFileServiceServer interface {
	mustEmbedUnimplementedFileServiceServer()
}

func RegisterFileServiceServer(s grpc.ServiceRegistrar, srv FileServiceServer) {
	s.RegisterService(&FileService_ServiceDesc, srv)
}

func _FileService_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServiceServer).UploadFile(&fileServiceUploadFileServer{stream})
}

type FileService_UploadFileServer interface {
	SendAndClose(*UploadResponse) error
	Recv() (*FileChunk, error)
	grpc.ServerStream
}

type fileServiceUploadFileServer struct {
	grpc.ServerStream
}

func (x *fileServiceUploadFileServer) SendAndClose(m *UploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileServiceUploadFileServer) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileService_ReadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileServiceServer).ReadFile(m, &fileServiceReadFileServer{stream})
}

type FileService_ReadFileServer interface {
	Send(*ReadResponse) error
	grpc.ServerStream
}

type fileServiceReadFileServer struct {
	grpc.ServerStream
}

func (x *fileServiceReadFileServer) Send(m *ReadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FileService_SaveReport_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServiceServer).SaveReport(&fileServiceSaveReportServer{stream})
}

type FileService_SaveReportServer interface {
	SendAndClose(*UploadReportResponse) error
	Recv() (*UploadReport, error)
	grpc.ServerStream
}

type fileServiceSaveReportServer struct {
	grpc.ServerStream
}

func (x *fileServiceSaveReportServer) SendAndClose(m *UploadReportResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileServiceSaveReportServer) Recv() (*UploadReport, error) {
	m := new(UploadReport)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileService_ReadReport_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadReportRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileServiceServer).ReadReport(m, &fileServiceReadReportServer{stream})
}

type FileService_ReadReportServer interface {
	Send(*ReadReportResponse) error
	grpc.ServerStream
}

type fileServiceReadReportServer struct {
	grpc.ServerStream
}

func (x *fileServiceReadReportServer) Send(m *ReadReportResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FileService_ListReport_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListReportRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileServiceServer).ListReport(m, &fileServiceListReportServer{stream})
}

type FileService_ListReportServer interface {
	Send(*ListReportResponse) error
	grpc.ServerStream
}

type fileServiceListReportServer struct {
	grpc.ServerStream
}

func (x *fileServiceListReportServer) Send(m *ListReportResponse) error {
	return x.ServerStream.SendMsg(m)
}

// FileService_ServiceDesc is the grpc.ServiceDesc for FileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chunker.FileService",
	HandlerType: (*FileServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _FileService_UploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReadFile",
			Handler:       _FileService_ReadFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "saveReport",
			Handler:       _FileService_SaveReport_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReadReport",
			Handler:       _FileService_ReadReport_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListReport",
			Handler:       _FileService_ListReport_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "upload.proto",
}
